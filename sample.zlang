#include "libutil"

struct Color {
    float r
    float g
    float b
    float a
} with {

    fn @.luminosity() {
        return @.r * 0.3 + @.g * 0.6 + @.b * 0.1
    }

    fn @.inverted() -> Color {
        return @ with {
            r: 255 - @.r
            g: 255 - @.g
            b: 255 - @.b
        }
    }

} impl Equatable {
    fn @.equals(any o) {
        return @ == o
    }
}

struct Image {
    Color[] pixels
    int width
    int height
} with {
    fn @.dimensions() -> int;int {
        return @.width; @.height
    }

    fn mutable @.invert() {
        for y in 0 .. @.height {
            var index = y * @.width
            for x in 0 .. @.width {
                @.pixels[index] = @.pixels[index].inverted()
                index++
            }
        }
    }
}

fn make_image(int width, int height) -> mutable Image {
    let size = width * height
    return new Image {
        pixels: new Color[size]
        width: width
        height: height
    }
}

union Number {
    float f;
    int n;
    byte b;
} with {
    fn @.to_int() -> int {
        return switch @ {
            float f -> round(f)
            int n -> n
            byte b -> (int) b
        }
    }

    fn @.is_int() -> bool {
        return switch @ {
            int n -> true
            default -> false
        }
    }
}

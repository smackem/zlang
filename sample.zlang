#include "libutil"

struct Color {
    float r
    float g
    float b
    float a
} is Equatable, Comparable

fn Color::luminosity() -> float {
    return self.r * 0.3 + self.g * 0.6 + self.b * 0.1
}

fn Color::r() -> self.r

fn Color::inverted() -> Color {
    return self with {
        r: 255 - self.r
        g: 255 - self.g
        b: 255 - self.b
    }
}

interface Equatable {
    fn equals(any obj) -> bool
}

struct Image {
    Color[] pixels
    int width
    int height
}

fn Image::dimensions() -> int;int {
    return self.width; self.height
}

fn mutable Image::invert() {
    for y in 0 .. self.height {
        var index = y * self.width
        for x in 0 .. self.width {
            self.pixels[index] = self.pixels[index].inverted()
            index++
        }
    }
}

fn make_image(int width, int height) -> mutable Image {
    let size = width * height
    return new Image {
        pixels: new Color[size]
        width: width
        height: height
    }
}

union Number {
    float f
    int n
    byte b
}

fn Number::f() -> self.f
fn mutable Number::f(v: float) {
    self.f = v
}

fn Number::to_int() -> int {
    return switch self {
        float f -> round(f)
        int n -> n
        byte b -> (int) b
    }
}

fn Number::is_int() -> bool {
    return switch self {
        int n -> true
        default -> false
    }
}

module sample uses std, file, image

#include "libutil"

struct File {
    handle: runtime_ptr
    items: int list
}

fn file_open(path: string, mode: string) -> File {
    return new File {
        handle: runtime::fopen(path, mode)
        items: new int list {}
    }
}

fn File::dispose() {
    runtime::fclose(self.handle)
}

fn compare(a: Comparable, b: Comparable) -> int {
    return a.compare(b)
}

struct Color {
    r: float
    g: float
    b: float
    a: float
} is Equatable, Comparable

fn Color::luminosity() -> float {
    return self.r * 0.3 + self.g * 0.6 + self.b * 0.1
}

fn Color::r() -> self.r

fn Color::inverted() -> Color {
    return new self with {
        r: 255 - self.r
        g: 255 - self.g
        b: 255 - self.b
    }
}

interface Equatable {
    fn equals(obj: object) -> bool
}

struct Image {
    pixels: Color[]
    width: int
    height: int
}

fn Image::width() -> int {
    return self.width
}

fn Image::height() -> int {
    return self.height
}

fn Image::is_empty() -> bool {
    return true if self.width == 0 and self.height == 0 else false
}

let empty_image: Image = make_image(0, 0)

fn mutable Image::invert() {
    let px: mutable Color[] = self.pixels
    for y: int in 0 .. self.height {
        var index: int = y * self.width
        for x: int in 0 .. self.width {
            px[index] = px[index].inverted()
            index++
        }
    }
}

fn make_image(width: int, height: int) -> mutable Image {
    let size: int = width * height
    return new Image {
        pixels: new Color[size]
        width: width
        height: height
    }
}

union Number {
    f: float
    n: int
    b: byte
}

let x: Number = new Number{ n: 234 }
let x: Number = new Number.f(123)
let x: Number = new Number::f(123)

fn Number::to_int() -> int {
    return switch self {
        f: float -> round(f)
        n: int -> n
        b: byte -> (int) b
    }
}

fn Number::is_int() -> bool {
    return switch self {
        n: int -> true
        else -> false
    }
}

// static methods:
struct StringMethods {}
let Strings: StringMethods = new StringMethods {}

// alternative:
// struct object Strings {}

fn Strings::compare(a: string, b: string) -> int {
}

fn make_list(numbers: int[]) -> int list {
    let number_list: int list = new int list {}
    number_list.add_array(numbers)
    return number_list
}

enum DatagramId {
    syncRequest = 1
    syncResponse = 2
    timeRequest = 3
    timeResponse = 4
}

let id: DatagramId = DatagramId::syncRequest

struct SyncPayload {
    timeStamp: int
}

struct TimePayload {
    time: string
}

union Datagram {
    syncRequest: SyncPayload
    syncResponse: SyncPayload
    timeRequest: TimePayload
    timeResponse: TimePayload
}

let d: Datagram = new Datagram::syncRequest(new SyncPayload { 123 })

fn x(flag: bool) {
    let n: int = {
        let a: int = 100
        let b: int = 200
        yield a + b
    } if flag != false else {
        yield 666
    }
}

fn y() {
    switch d {
        syncRequest: SyncPayload -> {
            log new "syncRequest"
        }
        syncResponse: SyncPayload -> {
            log new "syncResponse"
        }
    }
}

interface Comparer {
    fn compare(a: object, b: object) -> int
}

let c: Comparer = new Comparer::compare(a: object, b: object) -> int {
    return a - b
}

// ---------------------------------------------------------------

struct Date {
    year: int
    month: int
    day: int
}

fn makeDate(year: int, month: int, day: int) -> Date {
    return new Date {
        year = year
        month = month
        day = day
    }
}

struct Person {
    firstName: string
    lastName: string
    born: Date
    address: remote Address
}

struct Address {
    street: string
    number: int
    city: string
}

fn doIt() {
    use address: Address = new Address {
        street = new "abc"
    }
    use person: Person = new Person {
        firstName = new "Henry"
        lastName = new "Gurk"
        born = makeDate(2000, 01, 31)
        address = address
    }
}
